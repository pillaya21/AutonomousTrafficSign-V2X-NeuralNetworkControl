function [Y,Xf,Af] = SteeringNN(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Apr-2018 14:22:44.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.30593960040348;226.077874051702;1.36180013152756;-699.875899725869];
x1_step1.gain = [1.76312597251871;0.00693819528146553;1.25693514614487;0.00356364920611727];
x1_step1.ymin = -1;

% Layer 1
b1 = [-7.4998103552736879;-1.3642267840306965;2.0828190224459013;-0.45910402625919594;-0.75793181190695391;3.945175761371928;-0.13401756268065856;-0.26074638854179644;1.4085365877568634;0.97397948417889102];
IW1_1 = [4.7943104262852376 -1.2854942886695795 0.84037858644735552 6.191233008990479;1.5542563982481339 1.8657219909394798 0.089897752796289032 0.11562790065869201;-2.1438403671328383 1.6076542432082173 0.38005746472603325 -0.84311425629927494;0.39173744019302592 0.067796590718610064 0.6926641008941099 -0.95357537689763905;1.0535407572558322 0.029922774482944871 0.010131178006362245 -2.4409871631183018;-1.8475035314702222 0.28836213191534121 -1.8806480817312066 -3.8564142185811661;-1.489545909760611 1.1756741220872049 2.0730784347993203 1.4494107707772621;0.063852430706223262 2.2457376202003601 -0.45366237145593363 0.079806884965154687;0.92665312002964773 1.4619899287686009 0.93305780937620586 0.9417601281108785;0.48887448408928286 0.48977432763351919 -0.70791892369000509 -1.0626810794378245];

% Layer 2
b2 = 0.96521124236101274;
LW2_1 = [-2.704114525973115 1.1264616661348517 0.15206748338050566 -0.24524010300492713 0.086137489033481882 -3.2716341811341354 0.16001887439537521 0.052854478494280654 -0.57634834745342467 1.6327234200972227];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.33333333333333;
y1_step1.xoffset = 0.2;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
